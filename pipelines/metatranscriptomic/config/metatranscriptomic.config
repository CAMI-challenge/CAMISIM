// This parameters are used to enable and configure execution on slurm.
//process.executor = 'slurm'
//executor {
//    name = 'slurm'
//    memory = '64G'
//}
//process.memory = '64G'
process.time = '2h'

params {

    // The directory to save all output files to.
    // If the directory does not exist, it will be created.
    outdir = "${projectDir}/out_mtx"

    // Size of a single sample in Gigabasepairs (Gbp).
    // The actual size, including mapping files, might be larger.
    size = 0.05

    // Type of the used read simulator.
    // Choose from "art"/"pbsim3"/"nanosim3"
    // Note, that nanosim uses the from CAMISIM calculated transcript abundances as an approximation estimation and it will not reflect the same number of reads. 
    // For more information, see the Trans-NanoSim paper (https://academic.oup.com/gigascience/article/9/6/giaa061/5855462).
    type="art"

    // Type of feature from the gene annotation file to distribute and simulate reads from.
    // Only the sequences with the same value in the type attribute of the gene annotation file will be used for simulation.
    // Defaults are: feature_type = "gene" or feature_type = "mRNA". Check the input annotation file for the correct value.
    feature_type = "mRNA"

    // The child feature type from the gene annotation file to distribute and simulate reads from.
    // Only the sequences with the same value in the type attribute of the gene annotation file will be used for simulation.
    // The child needs to reference the parent in the gene annotation file.
    // All the children of the given feature type are attached together. The extrated feature sequences from a minus strand is reverse complemented.
    // In type of "CDS", the phase attribute (8th field) will be checked and the number of bases of this feature will be removed accordingly.
    // Defaults are: child_feature_type = "CDS" or child_feature_type = "exon". Check the input annotation file for the correct value.
    child_feature_type = "exon"

    // The number of samples to simualate reads for.
    number_of_samples=2

    // An optional seed to get consistent results.
    // If None is used, a random seed is chosen.
    seed = 632741178

    // A tab-sperated file holding a genome Id and the path to reference fasta file of the genome.
    // Use either an absolute path to reference fasta file or a relative one.
    // Note, that if a relative path is used, CAMISIM will expect the reference fasta file(s) to be in the project directory.
    genome_locations_file = "${projectDir}/nextflow_defaults/metatranscriptomic/genome_locations.tsv"

    // A tab-sperated file containing a genome ID and the path to the corresponding gene annotation file in gff3 file format.
    gene_annotations_file = "${projectDir}/nextflow_defaults/metatranscriptomic/gene_annotation_locations.tsv"

    // This parameter specifies whether to do the gold standard assembly per sample.
    gsa = true

    // The samples to do the gold standard assembly for ("[0,1]").
    // If the list is empty ("[]") the pooled gsa will be skipped.
    // If the parameter is set to true, all samples will be considered.
    pooled_gsa = true

    // This parameter specifies whether the reads should be anonymized.
    anonymization = true

    // Path to the input metadata tsv file.
    // The file has to be in the format: genome_ID`\t`OTU`\t`NCBI_ID`\t`novelty_category.
    metadata_file = "${projectDir}/nextflow_defaults/metatranscriptomic/metadata.tsv"
}

if (params.type == "art") {

    includeConfig "${projectDir}/pipelines/metatranscriptomic/config/art.config"

} else if (params.type == "nanosim3" ) {

    includeConfig "${projectDir}/pipelines/metatranscriptomic/config/nanosim.config"

} else if (params.type == "pbsim3" ) {

    includeConfig "${projectDir}/pipelines/metatranscriptomic/config/pbsim3.config"

}

includeConfig "${projectDir}/pipelines/shared/config/conda.config"

includeConfig "${projectDir}/pipelines/metatranscriptomic/config/distribution.config"